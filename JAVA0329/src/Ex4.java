
public class Ex4 {

	public static void main(String[] args) {
		/*
		 * 비트 단위 쉬프트 연산자(<< , >>)
		 * - 2진수 비트를 좌측 쪼는 우측으로 이동시키는 연산자
		 * 
		 * 1.좌측 쉬프트 연산(<<)
		 * - 2진수 비트를 좌측으로 x비트만큼 이동시킴
		 * - n << x 연산 결과는 n * 2^x 과 동일함
		 * - 좌측 1비트 쉬프트는 항상 어떤 수를 2로 곱한 결과와 같음.
		 * - 맨 좌측에서 탈락하는 비트를 맨 우측 끝으로 이동시킴
		 * - 따라서, int 타입에서 32비트 쉬프트 연산은 비트가 원래자리로 돌아오므로
		 *   쉬프트 연산을 하지 않은 결과와 동일함.
		 *   
		 * 2. 우측 쉬프트 연산(>>)
		 * - 2진수 비트를 우측으로 x비트만큼 이동시킴
		 * - n >> x 연산 결과는 n * 1/2^x 과 동일함
		 * - 우측 1비트 쉬프트는 항상 어떤 수를 2로 나눈 결과와 같음(정수)
		 * - 맨 우측에서 탈락하는 비트는 버려짐
		 *   따라서
		
		/*
		 * 00000000 00000000 00000000 00000001(1)
		 * 위의 숫자를 << 1 (좌측 1비트 쉬프트) 할 경우
		 * 00000000 00000000 00000000 00000010(2)
		 * 
		 * 1 << 30
		 * 01000000 00000000 00000000 00000000(좌측으로 30비트 쉬프트)
		 * 
		 * 1 << 31
		 * 10000000 00000000 00000000 00000000(좌측으로 31비트 쉬프트)
		 * 
		 * 1 << 32
		 * 00000000 00000000 00000000 00000001(좌측으로 32비트 쉬프트)
		 * => 좌측으로 탈락한 숫자를 우측 끝에 이동시킴
		 * => 결국 int형의 32비트 좌측쉬프트는 원래 숫자 그대로 유지됨.
		 */

		System.out.println("1 << 1 = " + (1 << 1));
		System.out.println("1 << 2 = " + (1 << 2));
		System.out.println("1 << 3 = " + (1 << 3));
		System.out.println("1 << 30 = " + (1 << 30));
		System.out.println("1 << 31 = " + (1 << 31));
		System.out.println("1 << 32 = " + (1 << 32)); // 원래 숫자로 돌아옴
		
		System.out.println("------------------------");
		
		System.out.println("10 >> 1 = " + (10 >> 1));
		System.out.println("10 >> 2 = " + (10 >> 2));
		System.out.println("10 >> 3 = " + (10 >> 3));
		System.out.println("10 >> 4 = " + (10 >> 4)); // 0이 됨
		System.out.println("10 >> 5 = " + (10 >> 5)); // 0이 됨
	}

}
